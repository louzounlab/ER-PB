import datetime
import secrets
import os
from os.path import join
from flask import Flask, render_template, request
import time
import pickle
import shutil
import pandas as pd


# create an instance of the Flask class, with the name of the running application and the paths for the static files and templates
app = Flask(__name__, static_folder='static', template_folder="templates")

# set the upload folder to the absolute path of the "upload_folder" directory
app.config['UPLOAD_FOLDER'] = os.path.abspath("upload_folder")

# set the lifetime of a session to one hour
app.config["PERMANENT_SESSION_LIFETIME"] = datetime.timedelta(hours=1)

# set the secret key to a random string generated by the secrets module
app.config["SECRET_KEY"] = secrets.token_hex()

# Load the models once
models_names = ["model_xgboost_day2.pkl", "model_xgboost_day7.pkl", "model_xgboost_day34.pkl"]
loaded_models = []
for model_name in models_names:
    with open(join("models", model_name), "rb") as file:
        model = pickle.load(file)
        loaded_models.append(model)


def clean_old_files():
    files = os.listdir("static")
    for file in files:
        if os.path.isdir(join("static", file)) and file != "bootstrap":
            # Time is older than an hour
            if time.time() - float(file) > 3600:
                shutil.rmtree(join("static", file))
                print("Deleted:", file)

def divide_array(arr, num_subarrays):
    #divides array to a number of sub arrays
    n = len(arr)
    subarray_size = n // num_subarrays
    remainder = n % num_subarrays

    subarrays = []
    start_index = 0

    for i in range(num_subarrays):
        end_index = start_index + subarray_size + (1 if i < remainder else 0)
        subarrays.append(arr[start_index:end_index])
        start_index = end_index

    return subarrays


def calculate_risk(predict_prob,day):
    list_pred = []
    list_pred_real = []
    with open(f"predicted_results/y_xgboost_data_{day}.csv") as pred_file:
        for line in pred_file:
            line = line.strip().split(',')
            list_pred.append(float(line[1]))
            list_pred_real.append([float(line[0]), float(line[1])])
    # sort list_pred_real by pred
    sorted_list_pred_real = sorted(list_pred_real, key=lambda x: x[1])
    # sorted_list_pred = sorted(list_pred)

    # percentile = find_percentile(predict_prob, np.array(sorted_list_pred))
    # print("percentile", percentile)
    sorted_list_pred_real[0][1] = 0
    sorted_list_pred_real[-1][1] = 1.1
    subarrays = 20
    bins_20 = divide_array(sorted_list_pred_real, subarrays)
    for bin in bins_20:
        print(len(bin))
        if predict_prob<bin[-1][1] :
            vals = [val[0] for val in bin]
            risk = sum(vals) / len(vals)
            return risk
@app.route('/process_form', methods=['POST', 'GET'])
def process_form():
    try:
        # Get the form data
        data = request.form

        # Get the median data dataframe
        data_df = pd.read_csv(join("static", "initial_df.csv"))

        # Fill the data from the form into the median data format
        if data["gest_age_weeks"]:
            if data["gest_age_days"]:
                data_df["Gestational age at admission"] = float(data["gest_age_weeks"])*7+float(data["gest_age_days"])
            else:
                data_df["Gestational age at admission"] = float(data["gest_age_weeks"])*7
        else:
            data_df["Gestational age at admission"] = 225.0

        if data['parity']:
            data_df['Parity'] = float(data['parity'])
        else:
            data_df['Parity'] = 1.0

        if data["max_pulse"]:
            data_df["Maximal pulse at admission"] = float(data["max_pulse"])
        else:
            data_df["Maximal pulse at admission"] = 74.0

        data_df['Previous hospitalizations during pregnancy'] = int(data['prev_hos'])
        data_df['Premature preterm rupture of membranes'] = int(data['pprom'])
        data_df['Cervical dynamics'] = int(data['cervical_dynamics'])

        if data['amniotic_fluid_index']:
            data_df['Amniotic Fluid Index at admission'] = float(data['amniotic_fluid_index'])
        else:
            data_df['Amniotic Fluid Index at admission'] = 100.0

        if data['cervical_dilation']:
            data_df['Cervical dilation'] = float(data['cervical_dilation'])
        else:
            data_df['Cervical dilation'] = 1.0

        if data['hemoglobin']:
            data_df['Hemoglobin at admission'] = float(data['hemoglobin'])
        else:
            data_df['Hemoglobin at admission'] = 11.8

        if data['living_children']:
            data_df['Living Children'] = float(data['living_children'])
        else:
            data_df['Living Children'] = 1.0

        if data['glucose']:
            data_df['Glucose Challenge Test result'] = float(data['glucose'])
        else:
            data_df['Glucose Challenge Test result'] = 116.0

        print(data_df)
        with open(f"static/label_statistics.csv") as mean_std_f:
            for line in mean_std_f:
                if "mean,std" in line:
                    continue
                label,_,mean,std = line.strip().split(",")
                data_df[label] = (data_df[label] - float(mean)) / float(std)
        # Predict the risk
        print(data_df)
        risks = []
        days = [2,7,34]
        for i,model in enumerate(loaded_models):
            risk = model.predict_proba(data_df)[:, 1][0]
            final_risk = calculate_risk(risk,days[i])
            print(f"predict prob: {risk}, risk: {final_risk},for day:{days[i]}")
            risks.append(final_risk)

        output_risks = [str(round(float(risk*100), 2))+'%' for risk in risks]

        return render_template("index.html", active="Home", risks=output_risks)
    except Exception as e:
        return render_template("index.html", active="Home", risks=[], error=str(e))


@app.route('/', methods=['GET'])
@app.route('/Home', methods=['GET'])
def home():
    return render_template("index.html", active="Home", risks=None)


@app.route('/Example', methods=['GET'])
def example():
    return render_template("example.html", active="Example")


@app.route('/About', methods=['GET'])
def about():
    return render_template("about.html", active="About")

@app.route('/Glossary', methods=['GET'])
def glossary():
    return render_template("glossary.html", active="Glossary")


if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=5000, use_reloader=True)
