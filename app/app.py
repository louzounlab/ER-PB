import datetime
import secrets
import os
from os.path import join
from flask import Flask, render_template, request
import time
import shutil
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rcParams

# Set the font
rcParams['font.family'] = 'Times New Roman'
rcParams['font.size'] = 25

# create an instance of the Flask class, with the name of the running application and the paths for the static files and templates
app = Flask(__name__, static_folder='static', template_folder="templates")

# set the upload folder to the absolute path of the "upload_folder" directory
app.config['UPLOAD_FOLDER'] = os.path.abspath("upload_folder")

# set the lifetime of a session to one hour
app.config["PERMANENT_SESSION_LIFETIME"] = datetime.timedelta(hours=1)

# set the secret key to a random string generated by the secrets module
app.config["SECRET_KEY"] = secrets.token_hex()


def clean_old_files():
    files = os.listdir("static")
    for file in files:
        if os.path.isdir(join("static", file)) and file != "bootstrap":
            # Time is older than an hour
            if time.time() - float(file) > 3600:
                shutil.rmtree(join("static", file))
                print("Deleted:", file)


@app.route('/process_form', methods=['POST', 'GET'])
def process_form():
    # Get the form data
    data = request.form

    # Get the median data dataframe
    median_data = pd.read_csv(join("static", "median_data.csv"))

    # Fill the data from the form into the median data format
    if data["gest_age"]:
        median_data["Gestational age at admission"] = float(data["gest_age"])
    if data['parity']:
        median_data['Parity'] = float(data['parity'])
    median_data["Gestational hypertensive disorders"] = int(data["ges_hype_dis"])
    if data["max_pulse"]:
        median_data["Maximal pulse at admission"] = float(data["max_pulse"])
    median_data['Previous hospitalizations during pregnancy'] = int(data['prev_hos'])
    median_data['Premature preterm rupture of membranes'] = int(data['pprom'])
    median_data['Cervical dynamics'] = int(data['cervical_dynamics'])
    if data['amniotic_fluid_index']:
        median_data['Amniotic Fluid Index at admission'] = float(data['amniotic_fluid_index'])
    if data['cervical_dilation']:
        median_data['Cervical dilation'] = float(data['cervical_dilation'])
    if data['hemoglobin']:
        median_data['Hemoglobin at admission'] = float(data['hemoglobin'])

    return render_template("index.html", active="Home")


@app.route('/', methods=['GET'])
@app.route('/Home', methods=['GET'])
def home():
    return render_template("index.html", active="Home")


@app.route('/Example', methods=['GET'])
def example():
    return render_template("example.html", active="Example")


@app.route('/About', methods=['GET'])
def about():
    return render_template("about.html", active="About")


if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=5000, use_reloader=True)
